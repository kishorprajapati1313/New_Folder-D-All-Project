using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class ShipControl : MonoBehaviour
{
    public float forwardSpeed = 25f;
    public float strafeSpeed = 7.5f;
    public float hoverSpeed = 5f;
    private float actualForwardSpeed, actualStrafeSpeed, actualHoverSpeed;
    public float forwardAcceleration = 2.5f;
    public float strafeAcceleration = 2f;
    public float hoverAcceleration = 2f;

    public float lookRateSpeed = 90f;
    private Vector2 lookInput, touchStartPosition;
    private bool isTouching = false;

    private float rollInput;
    public float rollSpeed = 90f;
    public float rollAcceleration = 3.5f;

    // Start is called before the first frame update
    void Start()
    {
        // Set the screen center and lock the cursor
        screencenter.x = Screen.width * .5f;
        screencenter.y = Screen.height * .5f;
        Cursor.lockState = CursorLockMode.Confined;
    }

    // Update is called once per frame
    void Update()
    {
        // Check for touch input
        if (Input.touchCount > 0)
        {
            Touch touch = Input.GetTouch(0);

            // Check if the touch has just started
            if (touch.phase == TouchPhase.Began)
            {
                isTouching = true;
                touchStartPosition = touch.position;
            }
            // Check if the touch has ended
            else if (touch.phase == TouchPhase.Ended)
            {
                isTouching = false;
            }
        }
        else
        {
            isTouching = false;
        }

        // Calculate the touch movement distance
        Vector2 touchDistance = Vector2.zero;
        if (isTouching)
        {
            Touch touch = Input.GetTouch(0);
            touchDistance = touch.position - touchStartPosition;
            touchDistance /= Screen.height * 0.5f; // Normalize the touch distance
        }

        // Get the roll input from the user
        rollInput = Mathf.Lerp(rollInput, Input.GetAxisRaw("Roll"), rollAcceleration * Time.deltaTime);

        // Rotate the plane based on the touch movement and roll input
        transform.Rotate(-touchDistance.y * lookRateSpeed * Time.deltaTime, touchDistance.x * lookRateSpeed * Time.deltaTime, rollInput * rollSpeed * Time.deltaTime, Space.Self);

        // Get the forward, strafe, and hover inputs from the user and calculate the actual speeds
        actualForwardSpeed = Mathf.Lerp(actualForwardSpeed, Input.GetAxisRaw("Vertical") * forwardSpeed, forwardAcceleration * Time.deltaTime);
        actualStrafeSpeed = Mathf.Lerp(actualStrafeSpeed, Input.GetAxisRaw("Horizontal") * strafeSpeed, strafeAcceleration * Time.deltaTime);
        actualHoverSpeed = Mathf.Lerp(actualHoverSpeed, Input.GetAxisRaw("Hover") * hoverSpeed, hoverAcceleration * Time.deltaTime);

        // Move the plane based on the actual speeds
        transform.position += transform.forward * actualForwardSpeed * Time.deltaTime;
        transform.position += (transform.right * actualStrafeSpeed * Time.deltaTime) + (transform.up * actualHoverSpeed * Time.deltaTime);
    }
}

